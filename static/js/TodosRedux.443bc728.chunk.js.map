{"version":3,"sources":["components/Todos/TodoInput.jsx","components/Todos/TodoModalStyles.js","components/Todos/TodoModal.jsx","components/TodosRedux/TodoItem.jsx","components/TodosRedux/TodoList.jsx","pages/TodosReduxPage.jsx","redux/todosGeri/actions.js"],"names":["useStyles","createUseStyles","formWrap","display","flexDirection","form","checkboxWrap","paddingTop","checkbox","margin","left","right","buttonsWrap","justifyContent","padding","TodoInput","onSubmit","useState","showForm","setShowForm","value","setValue","urgency","setUrgency","s","toggleForm","prevValue","handleUrgencyChange","e","target","className","preventDefault","newTodo","date","Date","now","isDone","label","onChange","type","checked","color","onClick","variant","modal__backdrop","position","top","width","height","backgroundColor","modal__title","modal__content","alignItems","minHeight","minWidth","transform","borderRadius","boxShadow","modal__btn","bottom","fontSize","textTransform","cursor","border","outline","todoModalRoot","document","querySelector","TodoModal","onOk","onCancel","text","createPortal","makeStyles","todosItem","marginBottom","TodoItem","todo","id","onToggle","onDelete","frmatedDate","moment","format","console","log","Card","CardActionArea","CardContent","Divider","CardActions","Checkbox","inputProps","IconButton","aria-label","component","areEqual","prevProps","nextProps","React","memo","TodoList","todos","map","TodosReduxPage","isLoading","setIsLoading","showModal","setShowModal","currentTodo","setCurrentTodo","dispatch","useDispatch","useSelector","state","todosGeri","items","loading","size","find","types","TODO_ADD","payload","addTodo","TODO_DELETE"],"mappings":"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","file":"static/js/TodosRedux.443bc728.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { Button, TextField } from \"@material-ui/core\";\n\n// JSS\nconst useStyles = createUseStyles({\n  formWrap: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  checkboxWrap: {\n    paddingTop: 20,\n  },\n  checkbox: {\n    margin: {\n      left: 10,\n      right: 3,\n    },\n  },\n  buttonsWrap: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: 20,\n  },\n});\n\nconst TodoInput = ({ onSubmit }) => {\n  const [showForm, setShowForm] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [urgency, setUrgency] = useState(\"low\");\n  const s = useStyles();\n\n  // Скрывает или показывает форму\n  const toggleForm = () => {\n    setShowForm((prevValue) => !prevValue);\n    setValue(\"\");\n    setUrgency(\"low\");\n  };\n\n  // Записываем значение инпута в стейт\n  const handleInputChange = (e) => setValue(e.target.value);\n\n  // Radio buttons\n  const handleUrgencyChange = (e) => setUrgency(e.target.value);\n\n  // Собираем все данные в объект\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Проверка на наличие текста в инпуте\n    if (!value) return;\n\n    const newTodo = {\n      // id: Date.now(),\n      date: Date.now(),\n      isDone: false,\n      value,\n      urgency,\n    };\n\n    // Отправляем тудушку через функцию из пропс\n    onSubmit(newTodo);\n\n    // Reset\n    setValue(\"\");\n    setUrgency(\"low\");\n    setShowForm(false);\n  };\n\n  return (\n    <div className={s.formWrap}>\n      {showForm ? (\n        <form className={s.form} onSubmit={handleSubmit}>\n          <TextField\n            // className={input}\n            label=\"Enter todo\"\n            value={value}\n            onChange={handleInputChange}\n          />\n          <div className={s.checkboxWrap}>\n            <span>Urgency:</span>\n\n            <label>\n              <input\n                className={s.checkbox}\n                type=\"radio\"\n                value=\"low\"\n                checked={urgency === \"low\"}\n                onChange={handleUrgencyChange}\n              />\n              <span>Low</span>\n            </label>\n\n            <label>\n              <input\n                className={s.checkbox}\n                type=\"radio\"\n                value=\"medium\"\n                checked={urgency === \"medium\"}\n                onChange={handleUrgencyChange}\n              />\n              <span>Medium</span>\n            </label>\n\n            <label>\n              <input\n                className={s.checkbox}\n                type=\"radio\"\n                value=\"high\"\n                checked={urgency === \"high\"}\n                onChange={handleUrgencyChange}\n              />\n              <span>High</span>\n            </label>\n          </div>\n          <div className={s.buttonsWrap}>\n            <Button color=\"primary\" onClick={toggleForm}>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Add todo\n            </Button>\n          </div>\n        </form>\n      ) : (\n        <Button variant=\"contained\" color=\"primary\" onClick={toggleForm}>\n          + Add todo\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import { createUseStyles } from \"react-jss\";\n\nexport default createUseStyles({\n  modal__backdrop: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n  },\n\n  modal__title: {\n    margin: 0,\n  },\n\n  modal__content: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 12,\n    minHeight: 300,\n    minWidth: 600,\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#fff\",\n    borderRadius: 3,\n    boxShadow:\n      \"0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)\",\n  },\n\n  modal__btn: {\n    padding: {\n      top: 10,\n      left: 20,\n      right: 20,\n      bottom: 10,\n    },\n    margin: 10,\n    fontSize: 16,\n    textTransform: \"uppercase\",\n    cursor: \"pointer\",\n    color: \"white\",\n    backgroundColor: \"teal\",\n    border: \"none\",\n    borderRadius: 4,\n    outline: \"none\",\n\n    \"&:hover\": {\n      backgroundColor: \"tomato\",\n    },\n  },\n});\n","// import React, { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport useStyles from \"./TodoModalStyles\";\n\n// Находит рут в разметке\nconst todoModalRoot = document.querySelector(\"#todoModal-root\");\n\nconst TodoModal = ({ onOk, onCancel, text }) => {\n  const s = useStyles();\n\n  return createPortal(\n    <div className={s.modal__backdrop}>\n      <div className={s.modal__content}>\n        <h2 className={s.modal__title}>Delete Todo {text}</h2>\n        <p>Do you really want to delete todo {text}?</p>\n\n        <div>\n          <button className={s.modal__btn} type=\"button\" onClick={onCancel}>\n            Cancel\n          </button>\n          <button className={s.modal__btn} type=\"button\" onClick={onOk}>\n            Ok\n          </button>\n        </div>\n      </div>\n    </div>,\n    todoModalRoot\n  );\n};\n\nexport default TodoModal;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  IconButton,\n  Checkbox,\n  CardActionArea,\n  Divider,\n} from \"@material-ui/core\";\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\n\nconst useStyles = makeStyles({\n  todosItem: {\n    marginBottom: 10,\n    backgroundColor: \"#eeeeff\",\n  },\n});\n\nconst TodoItem = ({\n  todo: { id, date, value, urgency, isDone },\n  onToggle,\n  onDelete,\n}) => {\n  const frmatedDate = moment(date).format(\"DD/MM/YYYY hh:mm:ss\");\n  const handleDelete = () => onDelete(id);\n  const handleToggle = () => onToggle(id);\n  const { todosItem } = useStyles();\n\n  // Консолим id после рендера\n  console.log(\"render\", id);\n\n  return (\n    <Card className={todosItem}>\n      <CardActionArea>\n        <CardContent>\n          <p>{value}</p>\n          <p>{urgency}</p>\n          <p>{frmatedDate}</p>\n        </CardContent>\n\n        <Divider />\n\n        <CardActions>\n          <Checkbox\n            checked={isDone}\n            onChange={handleToggle}\n            color=\"primary\"\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n          />\n          <IconButton\n            color=\"primary\"\n            aria-label=\"upload picture\"\n            component=\"span\"\n            onClick={handleDelete}\n          >\n            <DeleteTwoToneIcon />\n          </IconButton>\n        </CardActions>\n      </CardActionArea>\n    </Card>\n  );\n};\n\n// Аналог shouldComponentUpdate\n// Проверка на рендеринг элементов только с измененными props\n// В export default добавляем React.memo и фуркцию areEqual\nconst areEqual = (prevProps, nextProps) =>\n  prevProps.todo.isDone === nextProps.todo.isDone;\n\nexport default React.memo(TodoItem, areEqual);\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n// import TodoItem from \"./TodoItemClass\"; // не удалять\n\nconst TodoList = ({ todos, onDelete, onToggle }) => {\n  return (\n    <div>\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onDelete={onDelete}\n          onToggle={onToggle}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTodo, deleteTodo } from '../redux/todosGeri/actions';\nimport TodoInput from '../components/Todos/TodoInput';\nimport TodoList from '../components/TodosRedux/TodoList';\nimport PulseLoader from 'react-spinners/PulseLoader';\nimport Modal from '../components/Todos/TodoModal';\n// import {\n//   getTodos,\n//   createTodo,\n//   deleteTodo,\n//   updateTodo,\n// } from '../components/Todos/utils/todosAPI';\n// import { toast } from 'react-toastify';\n\nconst TodosReduxPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [currentTodo, setCurrentTodo] = useState('');\n\n  const dispatch = useDispatch();\n  const todos = useSelector((state) => state.todosGeri.items);\n\n  // Записывае в стейт готовую тудушку\n  const handleSubmit = (todo) => {\n    if (todos.find(({ value }) => value === todo.value)) return;\n    dispatch(addTodo(todo));\n\n    // Показываем Spinner...\n    // setIsLoading(true);\n\n    // createTodo(todo)\n    //   .then((data) => setTodos((prevState) => [data, ...prevState]))\n    //   .then(() =>\n    //     toast(`A new todo has been added to the state`, {\n    //       type: 'success',\n    //       autoClose: 2000,\n    //     })\n    //   )\n    //   .catch((error) =>\n    //     toast(error.message, {\n    //       type: 'error',\n    //       autoClose: 2000,\n    //     })\n    //   );\n    // .finally(() => setisLoading(false));\n  };\n\n  // Удаление туду\n  const handleDeleteTodo = (id) => {\n    setCurrentTodo(todos.find((todo) => todo.id === id));\n    setShowModal(true);\n  };\n\n  // Отмена удаления туду в подтверждении\n  const handleCanselModal = () => setShowModal(false);\n\n  // Подтверждение удаления\n  const handleOkModal = () => {\n    setShowModal(false);\n    dispatch(deleteTodo(currentTodo.id));\n\n    // setisLoading(true);\n\n    // deleteTodo(currentTodo.id)\n    //   .then((id) =>\n    //     setTodos((prevState) => prevState.filter((todo) => todo.id !== id))\n    //   )\n    //   .then(() =>\n    //     toast(`${currentTodo.value} successfully deleted`, {\n    //       type: 'success',\n    //       autoClose: 2000,\n    //     })\n    //   )\n    //   .catch((error) =>\n    //     toast(error.message, {\n    //       type: 'error',\n    //       autoClose: 2000,\n    //     })\n    //   );\n    // .finally(() => setisLoading(false));\n  };\n\n  // Изменение значения одного туду\n  const handleToggleTodo = (id) => {\n    const todo = todos.find((todo) => todo.id === id);\n\n    setIsLoading(true);\n\n    // updateTodo(id, { isDone: !todo.isDone })\n    //   .then((updatedTodo) =>\n    //     setTodos((prevState) =>\n    //       prevState.map((todo) =>\n    //         todo.id === updatedTodo.id ? updatedTodo : todo\n    //       )\n    //     )\n    //   )\n    //   .then(() =>\n    //     toast(`${currentTodo.value} successfully updated`, {\n    //       type: 'success',\n    //       autoClose: 2000,\n    //     })\n    //   )\n    //   .catch((error) =>\n    //     toast(error.message, {\n    //       type: 'error',\n    //       autoClose: 2000,\n    //     })\n    //   );\n  };\n\n  // componentDidMount\n  // GET todos from server > db.json (utils > todosAPI)\n  // useEffect(() => {\n  //   setisLoading(true);\n  //   getTodos()\n  //     .then((result) => setTodos(result))\n  //     .then(() =>\n  //       toast(`All data received from the db.json`, {\n  //         type: 'success',\n  //         autoClose: 2000,\n  //       })\n  //     )\n  //     .catch((error) =>\n  //       toast(error.message, {\n  //         type: 'error',\n  //         autoClose: 2000,\n  //       })\n  //     )\n  //     .finally(() => setisLoading(false));\n  // }, []);\n\n  return (\n    <>\n      <h1>Todos Redux</h1>\n      <PulseLoader color={'teal'} loading={isLoading} size={25} margin={5} />\n\n      {!isLoading && (\n        <>\n          <TodoInput onSubmit={handleSubmit} />\n          <TodoList\n            todos={todos}\n            onDelete={handleDeleteTodo}\n            onToggle={handleToggleTodo}\n          />\n        </>\n      )}\n\n      {showModal && (\n        <Modal\n          text={currentTodo.value}\n          onOk={handleOkModal}\n          onCancel={handleCanselModal}\n        />\n      )}\n\n      <ul>\n        <li>use Redux</li>\n        <li>use React-Redux</li>\n      </ul>\n    </>\n  );\n};\n\nexport default TodosReduxPage;\n","import types from './types';\n\nexport const addTodo = (todo) => ({\n  type: types.TODO_ADD,\n  payload: todo,\n});\n\nexport const deleteTodo = (id) => ({\n  type: types.TODO_DELETE,\n  payload: id,\n});\n"],"sourceRoot":""}